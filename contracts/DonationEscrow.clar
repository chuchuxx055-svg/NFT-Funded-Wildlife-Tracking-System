(define-constant ERR_NOT_AUTHORIZED u100)
(define-constant ERR_ANIMAL_NOT_FOUND u101)
(define-constant ERR_INSUFFICIENT_FUNDS u102)
(define-constant ERR_ALREADY_RELEASED u103)
(define-constant ERR_INVALID_MILESTONE u104)
(define-constant ERR_INVALID_AMOUNT u105)
(define-constant ERR_INVALID_RECIPIENT u106)
(define-constant ERR_MILESTONE_NOT_VERIFIED u107)
(define-constant ERR_ESCROW_NOT_FOUND u108)
(define-constant ERR_INVALID_ANIMAL_ID u109)
(define-constant ERR_INVALID_MILESTONE_ID u110)
(define-constant ERR_FUNDS_LOCKED u111)
(define-constant ERR_REFUND_NOT_ALLOWED u112)
(define-constant ERR_INVALID_TIMESTAMP u113)
(define-constant ERR_GOVERNANCE_NOT_SET u114)
(define-constant ERR_ORACLE_NOT_SET u115)
(define-constant ERR_INVALID_PERCENTAGE u116)
(define-constant ERR_MAX_MILESTONES_EXCEEDED u117)
(define-constant ERR_INVALID_REFUND_PERIOD u118)
(define-constant ERR_REFUND_PERIOD_EXPIRED u119)
(define-constant ERR_INVALID_FEE_RATE u120)
(define-constant ERR_FEE_TRANSFER_FAILED u121)
(define-constant ERR_INVALID_MIN_AMOUNT u122)
(define-constant ERR_INVALID_MAX_AMOUNT u123)
(define-constant ERR_ANIMAL_ALREADY_REGISTERED u124)
(define-constant ERR_INVALID_STATUS u125)
(define-constant ERR_PAUSED u126)
(define-constant ERR_NOT_PAUSED u127)
(define-constant ERR_INVALID_PAUSE_DURATION u128)
(define-constant ERR_INVALID_GRACE_PERIOD u129)
(define-constant ERR_GRACE_PERIOD_NOT_MET u130)

(define-data-var governance-contract principal tx-sender)
(define-data-var oracle-contract principal tx-sender)
(define-data-var platform-fee-rate uint u5)
(define-data-var refund-period uint u144)
(define-data-var max-milestones uint u10)
(define-data-var min-lock-amount uint u100)
(define-data-var max-lock-amount uint u1000000)
(define-data-var contract-paused bool false)
(define-data-var pause-duration uint u0)
(define-data-var grace-period uint u24)

(define-map EscrowBalances
  { animal-id: uint }
  { total-amount: uint, released-amount: uint, locked-timestamp: uint, status: (string-ascii 20) })

(define-map Milestones
  { animal-id: uint, milestone-id: uint }
  { amount: uint, verified: bool, release-timestamp: uint, recipient: principal, description: (string-utf8 256) })

(define-map FundAllocations
  { animal-id: uint, milestone-id: uint }
  { amount-released: uint, recipient: principal, timestamp: uint })

(define-map RefundRequests
  { animal-id: uint, donor: principal }
  { amount: uint, requested-timestamp: uint, approved: bool })

(define-read-only (get-escrow-balance (animal-id uint))
  (map-get? EscrowBalances { animal-id: animal-id }))

(define-read-only (get-milestone (animal-id uint) (milestone-id uint))
  (map-get? Milestones { animal-id: animal-id, milestone-id: milestone-id }))

(define-read-only (get-allocation (animal-id uint) (milestone-id uint))
  (map-get? FundAllocations { animal-id: animal-id, milestone-id: milestone-id }))

(define-read-only (get-refund-request (animal-id uint) (donor principal))
  (map-get? RefundRequests { animal-id: animal-id, donor: donor }))

(define-private (validate-amount (amount uint))
  (if (and (>= amount (var-get min-lock-amount)) (<= amount (var-get max-lock-amount)))
    (ok true)
    (err ERR_INVALID_AMOUNT)))

(define-private (validate-animal-id (animal-id uint))
  (if (> animal-id u0)
    (ok true)
    (err ERR_INVALID_ANIMAL_ID)))

(define-private (validate-milestone-id (milestone-id uint))
  (if (> milestone-id u0)
    (ok true)
    (err ERR_INVALID_MILESTONE_ID)))

(define-private (validate-recipient (recipient principal))
  (if (not (is-eq recipient tx-sender))
    (ok true)
    (err ERR_INVALID_RECIPIENT)))

(define-private (validate-percentage (percentage uint))
  (if (<= percentage u100)
    (ok true)
    (err ERR_INVALID_PERCENTAGE)))

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
    (ok true)
    (err ERR_INVALID_TIMESTAMP)))

(define-private (validate-status (status (string-ascii 20)))
  (if (or (is-eq status "active") (is-eq status "completed") (is-eq status "cancelled"))
    (ok true)
    (err ERR_INVALID_STATUS)))

(define-private (is-contract-paused)
  (var-get contract-paused))

(define-public (set-governance (new-governance principal))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (var-set governance-contract new-governance)
    (ok true)))

(define-public (set-oracle (new-oracle principal))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (var-set oracle-contract new-oracle)
    (ok true)))

(define-public (set-platform-fee-rate (new-rate uint))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (try! (validate-percentage new-rate))
    (var-set platform-fee-rate new-rate)
    (ok true)))

(define-public (set-refund-period (new-period uint))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (> new-period u0) (err ERR_INVALID_REFUND_PERIOD))
    (var-set refund-period new-period)
    (ok true)))

(define-public (set-max-milestones (new-max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (> new-max u0) (err ERR_MAX_MILESTONES_EXCEEDED))
    (var-set max-milestones new-max)
    (ok true)))

(define-public (set-min-lock-amount (new-min uint))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (> new-min u0) (err ERR_INVALID_MIN_AMOUNT))
    (var-set min-lock-amount new-min)
    (ok true)))

(define-public (set-max-lock-amount (new-max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (> new-max (var-get min-lock-amount)) (err ERR_INVALID_MAX_AMOUNT))
    (var-set max-lock-amount new-max)
    (ok true)))

(define-public (pause-contract (duration uint))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (not (is-contract-paused)) (err ERR_PAUSED))
    (asserts! (> duration u0) (err ERR_INVALID_PAUSE_DURATION))
    (var-set contract-paused true)
    (var-set pause-duration (+ block-height duration))
    (ok true)))

(define-public (unpause-contract)
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (is-contract-paused) (err ERR_NOT_PAUSED))
    (asserts! (>= block-height (var-get pause-duration)) (err ERR_GRACE_PERIOD_NOT_MET))
    (var-set contract-paused false)
    (var-set pause-duration u0)
    (ok true)))

(define-public (set-grace-period (new-period uint))
  (begin
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (> new-period u0) (err ERR_INVALID_GRACE_PERIOD))
    (var-set grace-period new-period)
    (ok true)))

(define-public (lock-funds (animal-id uint) (amount uint))
  (let ((escrow (map-get? EscrowBalances { animal-id: animal-id })))
    (asserts! (not (is-contract-paused)) (err ERR_PAUSED))
    (try! (validate-animal-id animal-id))
    (try! (validate-amount amount))
    (asserts! (is-some (contract-call? .AnimalRegistry get-animal animal-id)) (err ERR_ANIMAL_NOT_FOUND))
    (asserts! (is-none escrow) (err ERR_ANIMAL_ALREADY_REGISTERED))
    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))
    (let ((fee (* amount (var-get platform-fee-rate))))
      (try! (as-contract (stx-transfer? fee tx-sender (var-get governance-contract))))
      (map-set EscrowBalances { animal-id: animal-id } { total-amount: (- amount fee), released-amount: u0, locked-timestamp: block-height, status: "active" }))
    (print { event: "funds-locked", animal-id: animal-id, amount: amount })
    (ok true)))

(define-public (add-milestone (animal-id uint) (milestone-id uint) (amount uint) (recipient principal) (description (string-utf8 256)))
  (let ((escrow (unwrap! (map-get? EscrowBalances { animal-id: animal-id }) (err ERR_ESCROW_NOT_FOUND))))
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (try! (validate-milestone-id milestone-id))
    (try! (validate-amount amount))
    (try! (validate-recipient recipient))
    (asserts! (<= milestone-id (var-get max-milestones)) (err ERR_MAX_MILESTONES_EXCEEDED))
    (asserts! (<= (+ (get released-amount escrow) amount) (get total-amount escrow)) (err ERR_INSUFFICIENT_FUNDS))
    (asserts! (is-none (map-get? Milestones { animal-id: animal-id, milestone-id: milestone-id })) (err ERR_INVALID_MILESTONE))
    (map-set Milestones { animal-id: animal-id, milestone-id: milestone-id } { amount: amount, verified: false, release-timestamp: u0, recipient: recipient, description: description })
    (print { event: "milestone-added", animal-id: animal-id, milestone-id: milestone-id })
    (ok true)))

(define-public (verify-milestone (animal-id uint) (milestone-id uint))
  (let ((milestone (unwrap! (map-get? Milestones { animal-id: animal-id, milestone-id: milestone-id }) (err ERR_INVALID_MILESTONE))))
    (asserts! (is-eq tx-sender (var-get oracle-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (not (get verified milestone)) (err ERR_MILESTONE_NOT_VERIFIED))
    (map-set Milestones { animal-id: animal-id, milestone-id: milestone-id } (merge milestone { verified: true }))
    (print { event: "milestone-verified", animal-id: animal-id, milestone-id: milestone-id })
    (ok true)))

(define-public (release-funds (animal-id uint) (milestone-id uint))
  (let ((escrow (unwrap! (map-get? EscrowBalances { animal-id: animal-id }) (err ERR_ESCROW_NOT_FOUND)))
        (milestone (unwrap! (map-get? Milestones { animal-id: animal-id, milestone-id: milestone-id }) (err ERR_INVALID_MILESTONE))))
    (asserts! (not (is-contract-paused)) (err ERR_PAUSED))
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (is-eq (get status escrow) "active") (err ERR_INVALID_STATUS))
    (asserts! (get verified milestone) (err ERR_MILESTONE_NOT_VERIFIED))
    (asserts! (is-eq (get release-timestamp milestone) u0) (err ERR_ALREADY_RELEASED))
    (asserts! (>= (- block-height (get locked-timestamp escrow)) (var-get grace-period)) (err ERR_GRACE_PERIOD_NOT_MET))
    (let ((amount (get amount milestone)))
      (try! (as-contract (stx-transfer? amount tx-sender (get recipient milestone))))
      (map-set EscrowBalances { animal-id: animal-id } (merge escrow { released-amount: (+ (get released-amount escrow) amount) }))
      (map-set Milestones { animal-id: animal-id, milestone-id: milestone-id } (merge milestone { release-timestamp: block-height }))
      (map-set FundAllocations { animal-id: animal-id, milestone-id: milestone-id } { amount-released: amount, recipient: (get recipient milestone), timestamp: block-height })
      (if (>= (get released-amount escrow) (get total-amount escrow))
        (map-set EscrowBalances { animal-id: animal-id } (merge escrow { status: "completed" }))
        true)
      (print { event: "funds-released", animal-id: animal-id, milestone-id: milestone-id, amount: amount })
      (ok true))))

(define-public (request-refund (animal-id uint) (amount uint))
  (let ((escrow (unwrap! (map-get? EscrowBalances { animal-id: animal-id }) (err ERR_ESCROW_NOT_FOUND))))
    (asserts! (not (is-contract-paused)) (err ERR_PAUSED))
    (asserts! (is-eq (get status escrow) "active") (err ERR_INVALID_STATUS))
    (asserts! (<= amount (- (get total-amount escrow) (get released-amount escrow))) (err ERR_INSUFFICIENT_FUNDS))
    (asserts! (<= (- block-height (get locked-timestamp escrow)) (var-get refund-period)) (err ERR_REFUND_PERIOD_EXPIRED))
    (asserts! (is-none (map-get? RefundRequests { animal-id: animal-id, donor: tx-sender })) (err ERR_REFUND_NOT_ALLOWED))
    (map-set RefundRequests { animal-id: animal-id, donor: tx-sender } { amount: amount, requested-timestamp: block-height, approved: false })
    (print { event: "refund-requested", animal-id: animal-id, donor: tx-sender, amount: amount })
    (ok true)))

(define-public (approve-refund (animal-id uint) (donor principal))
  (let ((escrow (unwrap! (map-get? EscrowBalances { animal-id: animal-id }) (err ERR_ESCROW_NOT_FOUND)))
        (request (unwrap! (map-get? RefundRequests { animal-id: animal-id, donor: donor }) (err ERR_REFUND_NOT_ALLOWED))))
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (not (get approved request)) (err ERR_ALREADY_RELEASED))
    (let ((amount (get amount request)))
      (try! (as-contract (stx-transfer? amount tx-sender donor)))
      (map-set EscrowBalances { animal-id: animal-id } (merge escrow { total-amount: (- (get total-amount escrow) amount) }))
      (map-set RefundRequests { animal-id: animal-id, donor: donor } (merge request { approved: true }))
      (if (is-eq (get total-amount escrow) (get released-amount escrow))
        (map-set EscrowBalances { animal-id: animal-id } (merge escrow { status: "cancelled" }))
        true)
      (print { event: "refund-approved", animal-id: animal-id, donor: donor, amount: amount })
      (ok true))))

(define-public (cancel-escrow (animal-id uint))
  (let ((escrow (unwrap! (map-get? EscrowBalances { animal-id: animal-id }) (err ERR_ESCROW_NOT_FOUND))))
    (asserts! (is-eq tx-sender (var-get governance-contract)) (err ERR_NOT_AUTHORIZED))
    (asserts! (is-eq (get status escrow) "active") (err ERR_INVALID_STATUS))
    (asserts! (is-eq (get released-amount escrow) u0) (err ERR_FUNDS_LOCKED))
    (let ((amount (get total-amount escrow)))
      (try! (as-contract (stx-transfer? amount tx-sender tx-sender)))
      (map-set EscrowBalances { animal-id: animal-id } (merge escrow { status: "cancelled", total-amount: u0 }))
      (print { event: "escrow-cancelled", animal-id: animal-id })
      (ok true))))